// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: nsfw/v1/nsfw.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "nsfw.v1";

export interface ClassifyRequest {
  imageUrl?: string | undefined;
  image?: Uint8Array | undefined;
}

export interface ClassifyResponse {
  results: ClassifyResult[];
}

export interface ClassifyResult {
  label: string;
  probability: number;
}

function createBaseClassifyRequest(): ClassifyRequest {
  return { imageUrl: undefined, image: undefined };
}

export const ClassifyRequest = {
  encode(message: ClassifyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageUrl !== undefined) {
      writer.uint32(10).string(message.imageUrl);
    }
    if (message.image !== undefined) {
      writer.uint32(18).bytes(message.image);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClassifyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassifyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.image = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassifyRequest {
    return {
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : undefined,
      image: isSet(object.image) ? bytesFromBase64(object.image) : undefined,
    };
  },

  toJSON(message: ClassifyRequest): unknown {
    const obj: any = {};
    if (message.imageUrl !== undefined) {
      obj.imageUrl = message.imageUrl;
    }
    if (message.image !== undefined) {
      obj.image = base64FromBytes(message.image);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassifyRequest>, I>>(base?: I): ClassifyRequest {
    return ClassifyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassifyRequest>, I>>(object: I): ClassifyRequest {
    const message = createBaseClassifyRequest();
    message.imageUrl = object.imageUrl ?? undefined;
    message.image = object.image ?? undefined;
    return message;
  },
};

function createBaseClassifyResponse(): ClassifyResponse {
  return { results: [] };
}

export const ClassifyResponse = {
  encode(message: ClassifyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.results) {
      ClassifyResult.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClassifyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassifyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(ClassifyResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassifyResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => ClassifyResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ClassifyResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => ClassifyResult.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassifyResponse>, I>>(base?: I): ClassifyResponse {
    return ClassifyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassifyResponse>, I>>(object: I): ClassifyResponse {
    const message = createBaseClassifyResponse();
    message.results = object.results?.map((e) => ClassifyResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseClassifyResult(): ClassifyResult {
  return { label: "", probability: 0 };
}

export const ClassifyResult = {
  encode(message: ClassifyResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    if (message.probability !== 0) {
      writer.uint32(21).float(message.probability);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClassifyResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassifyResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.probability = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassifyResult {
    return {
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      probability: isSet(object.probability) ? globalThis.Number(object.probability) : 0,
    };
  },

  toJSON(message: ClassifyResult): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.probability !== 0) {
      obj.probability = message.probability;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassifyResult>, I>>(base?: I): ClassifyResult {
    return ClassifyResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassifyResult>, I>>(object: I): ClassifyResult {
    const message = createBaseClassifyResult();
    message.label = object.label ?? "";
    message.probability = object.probability ?? 0;
    return message;
  },
};

export type PredictorServiceService = typeof PredictorServiceService;
export const PredictorServiceService = {
  classify: {
    path: "/nsfw.v1.PredictorService/Classify",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ClassifyRequest) => Buffer.from(ClassifyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ClassifyRequest.decode(value),
    responseSerialize: (value: ClassifyResponse) => Buffer.from(ClassifyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ClassifyResponse.decode(value),
  },
} as const;

export interface PredictorServiceServer extends UntypedServiceImplementation {
  classify: handleUnaryCall<ClassifyRequest, ClassifyResponse>;
}

export interface PredictorServiceClient extends Client {
  classify(
    request: ClassifyRequest,
    callback: (error: ServiceError | null, response: ClassifyResponse) => void,
  ): ClientUnaryCall;
  classify(
    request: ClassifyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ClassifyResponse) => void,
  ): ClientUnaryCall;
  classify(
    request: ClassifyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ClassifyResponse) => void,
  ): ClientUnaryCall;
}

export const PredictorServiceClient = makeGenericClientConstructor(
  PredictorServiceService,
  "nsfw.v1.PredictorService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PredictorServiceClient;
  service: typeof PredictorServiceService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
